# -*- coding: utf-8 -*-
import time
import sys

from sql_simulation import utils


def test_gen_2():
    g = utils.Generator()
    start = time.time()
    r = g.generate_two_list([1, 2, 3], ['a', 'b'])
    expect_result = [['a', 'b', 1, 2, 3],
                     ['a', 1, 'b', 2, 3],
                     ['a', 1, 2, 'b', 3],
                     ['a', 1, 2, 3, 'b'],
                     [1, 'a', 'b', 2, 3],
                     [1, 'a', 2, 'b', 3],
                     [1, 'a', 2, 3, 'b'],
                     [1, 2, 'a', 'b', 3],
                     [1, 2, 'a', 3, 'b'],
                     [1, 2, 3, 'a', 'b']]

    print(time.time() - start)
    print(sys.getsizeof(r))
    for result in r:
        assert result in expect_result
    assert len(r) == len(expect_result)


def test_gen():
    g = utils.Generator()

    g.add_list([1, 2, 3])
    g.add_list(['a', 'b'])
    g.add_list([10, 20])
    expect_result = [[10, 20, 'a', 'b', 1, 2, 3], [10, 'a', 20, 'b', 1, 2, 3], [10, 'a', 'b', 20, 1, 2, 3],
                     [10, 'a', 'b', 1, 20, 2, 3], [10, 'a', 'b', 1, 2, 20, 3], [10, 'a', 'b', 1, 2, 3, 20],
                     ['a', 10, 20, 'b', 1, 2, 3], ['a', 10, 'b', 20, 1, 2, 3], ['a', 10, 'b', 1, 20, 2, 3],
                     ['a', 10, 'b', 1, 2, 20, 3], ['a', 10, 'b', 1, 2, 3, 20], ['a', 'b', 10, 20, 1, 2, 3],
                     ['a', 'b', 10, 1, 20, 2, 3], ['a', 'b', 10, 1, 2, 20, 3], ['a', 'b', 10, 1, 2, 3, 20],
                     ['a', 'b', 1, 10, 20, 2, 3], ['a', 'b', 1, 10, 2, 20, 3], ['a', 'b', 1, 10, 2, 3, 20],
                     ['a', 'b', 1, 2, 10, 20, 3], ['a', 'b', 1, 2, 10, 3, 20], ['a', 'b', 1, 2, 3, 10, 20],
                     [10, 20, 'a', 1, 'b', 2, 3], [10, 'a', 20, 1, 'b', 2, 3], [10, 'a', 1, 20, 'b', 2, 3],
                     [10, 'a', 1, 'b', 20, 2, 3], [10, 'a', 1, 'b', 2, 20, 3], [10, 'a', 1, 'b', 2, 3, 20],
                     ['a', 10, 20, 1, 'b', 2, 3], ['a', 10, 1, 20, 'b', 2, 3], ['a', 10, 1, 'b', 20, 2, 3],
                     ['a', 10, 1, 'b', 2, 20, 3], ['a', 10, 1, 'b', 2, 3, 20], ['a', 1, 10, 20, 'b', 2, 3],
                     ['a', 1, 10, 'b', 20, 2, 3], ['a', 1, 10, 'b', 2, 20, 3], ['a', 1, 10, 'b', 2, 3, 20],
                     ['a', 1, 'b', 10, 20, 2, 3], ['a', 1, 'b', 10, 2, 20, 3], ['a', 1, 'b', 10, 2, 3, 20],
                     ['a', 1, 'b', 2, 10, 20, 3], ['a', 1, 'b', 2, 10, 3, 20], ['a', 1, 'b', 2, 3, 10, 20],
                     [10, 20, 'a', 1, 2, 'b', 3], [10, 'a', 20, 1, 2, 'b', 3], [10, 'a', 1, 20, 2, 'b', 3],
                     [10, 'a', 1, 2, 20, 'b', 3], [10, 'a', 1, 2, 'b', 20, 3], [10, 'a', 1, 2, 'b', 3, 20],
                     ['a', 10, 20, 1, 2, 'b', 3], ['a', 10, 1, 20, 2, 'b', 3], ['a', 10, 1, 2, 20, 'b', 3],
                     ['a', 10, 1, 2, 'b', 20, 3], ['a', 10, 1, 2, 'b', 3, 20], ['a', 1, 10, 20, 2, 'b', 3],
                     ['a', 1, 10, 2, 20, 'b', 3], ['a', 1, 10, 2, 'b', 20, 3], ['a', 1, 10, 2, 'b', 3, 20],
                     ['a', 1, 2, 10, 20, 'b', 3], ['a', 1, 2, 10, 'b', 20, 3], ['a', 1, 2, 10, 'b', 3, 20],
                     ['a', 1, 2, 'b', 10, 20, 3], ['a', 1, 2, 'b', 10, 3, 20], ['a', 1, 2, 'b', 3, 10, 20],
                     [10, 20, 'a', 1, 2, 3, 'b'], [10, 'a', 20, 1, 2, 3, 'b'], [10, 'a', 1, 20, 2, 3, 'b'],
                     [10, 'a', 1, 2, 20, 3, 'b'], [10, 'a', 1, 2, 3, 20, 'b'], [10, 'a', 1, 2, 3, 'b', 20],
                     ['a', 10, 20, 1, 2, 3, 'b'], ['a', 10, 1, 20, 2, 3, 'b'], ['a', 10, 1, 2, 20, 3, 'b'],
                     ['a', 10, 1, 2, 3, 20, 'b'], ['a', 10, 1, 2, 3, 'b', 20], ['a', 1, 10, 20, 2, 3, 'b'],
                     ['a', 1, 10, 2, 20, 3, 'b'], ['a', 1, 10, 2, 3, 20, 'b'], ['a', 1, 10, 2, 3, 'b', 20],
                     ['a', 1, 2, 10, 20, 3, 'b'], ['a', 1, 2, 10, 3, 20, 'b'], ['a', 1, 2, 10, 3, 'b', 20],
                     ['a', 1, 2, 3, 10, 20, 'b'], ['a', 1, 2, 3, 10, 'b', 20], ['a', 1, 2, 3, 'b', 10, 20],
                     [10, 20, 1, 'a', 'b', 2, 3], [10, 1, 20, 'a', 'b', 2, 3], [10, 1, 'a', 20, 'b', 2, 3],
                     [10, 1, 'a', 'b', 20, 2, 3], [10, 1, 'a', 'b', 2, 20, 3], [10, 1, 'a', 'b', 2, 3, 20],
                     [1, 10, 20, 'a', 'b', 2, 3], [1, 10, 'a', 20, 'b', 2, 3], [1, 10, 'a', 'b', 20, 2, 3],
                     [1, 10, 'a', 'b', 2, 20, 3], [1, 10, 'a', 'b', 2, 3, 20], [1, 'a', 10, 20, 'b', 2, 3],
                     [1, 'a', 10, 'b', 20, 2, 3], [1, 'a', 10, 'b', 2, 20, 3], [1, 'a', 10, 'b', 2, 3, 20],
                     [1, 'a', 'b', 10, 20, 2, 3], [1, 'a', 'b', 10, 2, 20, 3], [1, 'a', 'b', 10, 2, 3, 20],
                     [1, 'a', 'b', 2, 10, 20, 3], [1, 'a', 'b', 2, 10, 3, 20], [1, 'a', 'b', 2, 3, 10, 20],
                     [10, 20, 1, 'a', 2, 'b', 3], [10, 1, 20, 'a', 2, 'b', 3], [10, 1, 'a', 20, 2, 'b', 3],
                     [10, 1, 'a', 2, 20, 'b', 3], [10, 1, 'a', 2, 'b', 20, 3], [10, 1, 'a', 2, 'b', 3, 20],
                     [1, 10, 20, 'a', 2, 'b', 3], [1, 10, 'a', 20, 2, 'b', 3], [1, 10, 'a', 2, 20, 'b', 3],
                     [1, 10, 'a', 2, 'b', 20, 3], [1, 10, 'a', 2, 'b', 3, 20], [1, 'a', 10, 20, 2, 'b', 3],
                     [1, 'a', 10, 2, 20, 'b', 3], [1, 'a', 10, 2, 'b', 20, 3], [1, 'a', 10, 2, 'b', 3, 20],
                     [1, 'a', 2, 10, 20, 'b', 3], [1, 'a', 2, 10, 'b', 20, 3], [1, 'a', 2, 10, 'b', 3, 20],
                     [1, 'a', 2, 'b', 10, 20, 3], [1, 'a', 2, 'b', 10, 3, 20], [1, 'a', 2, 'b', 3, 10, 20],
                     [10, 20, 1, 'a', 2, 3, 'b'], [10, 1, 20, 'a', 2, 3, 'b'], [10, 1, 'a', 20, 2, 3, 'b'],
                     [10, 1, 'a', 2, 20, 3, 'b'], [10, 1, 'a', 2, 3, 20, 'b'], [10, 1, 'a', 2, 3, 'b', 20],
                     [1, 10, 20, 'a', 2, 3, 'b'], [1, 10, 'a', 20, 2, 3, 'b'], [1, 10, 'a', 2, 20, 3, 'b'],
                     [1, 10, 'a', 2, 3, 20, 'b'], [1, 10, 'a', 2, 3, 'b', 20], [1, 'a', 10, 20, 2, 3, 'b'],
                     [1, 'a', 10, 2, 20, 3, 'b'], [1, 'a', 10, 2, 3, 20, 'b'], [1, 'a', 10, 2, 3, 'b', 20],
                     [1, 'a', 2, 10, 20, 3, 'b'], [1, 'a', 2, 10, 3, 20, 'b'], [1, 'a', 2, 10, 3, 'b', 20],
                     [1, 'a', 2, 3, 10, 20, 'b'], [1, 'a', 2, 3, 10, 'b', 20], [1, 'a', 2, 3, 'b', 10, 20],
                     [10, 20, 1, 2, 'a', 'b', 3], [10, 1, 20, 2, 'a', 'b', 3], [10, 1, 2, 20, 'a', 'b', 3],
                     [10, 1, 2, 'a', 20, 'b', 3], [10, 1, 2, 'a', 'b', 20, 3], [10, 1, 2, 'a', 'b', 3, 20],
                     [1, 10, 20, 2, 'a', 'b', 3], [1, 10, 2, 20, 'a', 'b', 3], [1, 10, 2, 'a', 20, 'b', 3],
                     [1, 10, 2, 'a', 'b', 20, 3], [1, 10, 2, 'a', 'b', 3, 20], [1, 2, 10, 20, 'a', 'b', 3],
                     [1, 2, 10, 'a', 20, 'b', 3], [1, 2, 10, 'a', 'b', 20, 3], [1, 2, 10, 'a', 'b', 3, 20],
                     [1, 2, 'a', 10, 20, 'b', 3], [1, 2, 'a', 10, 'b', 20, 3], [1, 2, 'a', 10, 'b', 3, 20],
                     [1, 2, 'a', 'b', 10, 20, 3], [1, 2, 'a', 'b', 10, 3, 20], [1, 2, 'a', 'b', 3, 10, 20],
                     [10, 20, 1, 2, 'a', 3, 'b'], [10, 1, 20, 2, 'a', 3, 'b'], [10, 1, 2, 20, 'a', 3, 'b'],
                     [10, 1, 2, 'a', 20, 3, 'b'], [10, 1, 2, 'a', 3, 20, 'b'], [10, 1, 2, 'a', 3, 'b', 20],
                     [1, 10, 20, 2, 'a', 3, 'b'], [1, 10, 2, 20, 'a', 3, 'b'], [1, 10, 2, 'a', 20, 3, 'b'],
                     [1, 10, 2, 'a', 3, 20, 'b'], [1, 10, 2, 'a', 3, 'b', 20], [1, 2, 10, 20, 'a', 3, 'b'],
                     [1, 2, 10, 'a', 20, 3, 'b'], [1, 2, 10, 'a', 3, 20, 'b'], [1, 2, 10, 'a', 3, 'b', 20],
                     [1, 2, 'a', 10, 20, 3, 'b'], [1, 2, 'a', 10, 3, 20, 'b'], [1, 2, 'a', 10, 3, 'b', 20],
                     [1, 2, 'a', 3, 10, 20, 'b'], [1, 2, 'a', 3, 10, 'b', 20], [1, 2, 'a', 3, 'b', 10, 20],
                     [10, 20, 1, 2, 3, 'a', 'b'], [10, 1, 20, 2, 3, 'a', 'b'], [10, 1, 2, 20, 3, 'a', 'b'],
                     [10, 1, 2, 3, 20, 'a', 'b'], [10, 1, 2, 3, 'a', 20, 'b'], [10, 1, 2, 3, 'a', 'b', 20],
                     [1, 10, 20, 2, 3, 'a', 'b'], [1, 10, 2, 20, 3, 'a', 'b'], [1, 10, 2, 3, 20, 'a', 'b'],
                     [1, 10, 2, 3, 'a', 20, 'b'], [1, 10, 2, 3, 'a', 'b', 20], [1, 2, 10, 20, 3, 'a', 'b'],
                     [1, 2, 10, 3, 20, 'a', 'b'], [1, 2, 10, 3, 'a', 20, 'b'], [1, 2, 10, 3, 'a', 'b', 20],
                     [1, 2, 3, 10, 20, 'a', 'b'], [1, 2, 3, 10, 'a', 20, 'b'], [1, 2, 3, 10, 'a', 'b', 20],
                     [1, 2, 3, 'a', 10, 20, 'b'], [1, 2, 3, 'a', 10, 'b', 20], [1, 2, 3, 'a', 'b', 10, 20]]
    r = g.generate()
    print(sys.getsizeof(r))

    for result in r:
        assert result in expect_result
    assert len(r) == len(expect_result)
